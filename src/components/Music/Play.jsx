/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { useCursor, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three";
import { damp, damp3 } from "maath/easing";

export function Play(props) {
  const { nodes, materials } = useGLTF("/models/play.glb");
  const playRef = useRef();

  const [hovered, setHovered] = useState(false);
  useCursor(hovered);

  materials.PlayGreen.toneMapped = false;
  materials.PlayGreen.emissive = new THREE.Color("#00ff00");

  useFrame((_state, delta) => {
    damp(
      materials.PlayGreen,
      "emissiveIntensity",
      hovered ? 20 : 2,
      0.1,
      delta * 0.5
    );
    damp3(
      playRef.current.position,
      props.playing ? [0, 0, 0.4] : [0, 0, 0.5],
      0.1,
      delta * 0.3
    );
  });

  return (
    <group
      ref={playRef}
      {...props}
      dispose={null}
      onPointerEnter={(event) => {
        event.stopPropagation();
        !hovered && setHovered(true);
      }}
      onPointerLeave={(event) => {
        event.stopPropagation();
        setHovered(false);
      }}
      onClick={(event) => {
        event.stopPropagation();
        !props.soundRef.current.playing()
          ? props.soundRef.current.play()
          : null;
        !props.playing ? props.setPlaying(true) : null;
      }}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane.geometry}
        material={materials.PlayGreen}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[1, 1, 0.8]}
      />
    </group>
  );
}

useGLTF.preload("/models/play.glb");
